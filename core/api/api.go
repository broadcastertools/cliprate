// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
)

// Defines values for ClipType.
const (
	ClipTypeTwitchclip ClipType = "twitchclip"

	ClipTypeYoutube ClipType = "youtube"
)

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Clip defines model for Clip.
type Clip struct {
	// The category name the clip is posted in.
	Category string `json:"category"`

	// Our subscriber identifier.
	ClipId string `json:"clip_id"`

	// Data for the clip, this should be used along with clip type.
	Data string `json:"data"`

	// Timestamp for when the clip was posted.
	Posted string `json:"posted"`

	// Identifier of the subscriber.
	PostedBy string `json:"posted_by"`

	// A URI to the thumbnail.
	ThumbnailUri string `json:"thumbnail_uri"`

	// A display title.
	Title string `json:"title"`

	// Where the clip is hosted.
	Type ClipType `json:"type"`
}

// Where the clip is hosted.
type ClipType string

// SiteConfig defines model for SiteConfig.
type SiteConfig struct {
	// A hex color used for the appbar.
	AppbarColor string `json:"appbar_color"`

	// A URL to redirect the user to login.
	AuthorizationUrl string `json:"authorization_url"`

	// The expected domain for this application, for example clips.mutexisthegoat.com
	Domain string `json:"domain"`

	// When true, subscribers that was gifted their subscription can login.
	IsGiftedAuthorized bool `json:"is_gifted_authorized"`

	// A full URI to a logo that should be displayed in the app.
	LogoUri string `json:"logo_uri"`

	// The name of the streamer that is hosting this insance, for example MuTeX
	StreamerDisplayName string `json:"streamer_display_name"`

	// The name of the streamer that is hosting this insance, for example 98506045
	StreamerId string `json:"streamer_id"`

	// The name of the streamer that is hosting this insance, for example mutex
	StreamerLogin string `json:"streamer_login"`
}

// Subscriber defines model for Subscriber.
type Subscriber struct {
	// The display name of the subscriber.
	DisplayName string `json:"display_name"`

	// Email address of the subscriber, this is where notifications would be sent too.
	Email string `json:"email"`

	// Is the subscriber a mod or owner of the broadcaster.
	IsAdmin bool `json:"is_admin"`

	// Is the subscriber currently subscriber.
	IsSubscribed bool `json:"is_subscribed"`

	// A timestamp for when the subscriber logged into this application first.
	Joined string `json:"joined"`

	// Our subscriber identifier.
	SubscriberId string `json:"subscriber_id"`

	// Twitch's identifier for the subscriber.
	TwitchId string `json:"twitch_id"`
}

// LoginWithTwitchCodeRequest defines model for loginWithTwitchCodeRequest.
type LoginWithTwitchCodeRequest struct {
	Code string `json:"code"`
}

// LoginWithTwitchCodeResponse defines model for loginWithTwitchCodeResponse.
type LoginWithTwitchCodeResponse struct {
	Self  Subscriber `json:"self"`
	Token string     `json:"token"`
}

// LoginWithTwitchCodeJSONBody defines parameters for LoginWithTwitchCode.
type LoginWithTwitchCodeJSONBody LoginWithTwitchCodeRequest

// LoginWithTwitchCodeJSONRequestBody defines body for LoginWithTwitchCode for application/json ContentType.
type LoginWithTwitchCodeJSONRequestBody LoginWithTwitchCodeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of clips.
	// (GET /clips)
	GetClips(w http.ResponseWriter, r *http.Request)
	// Login with Twitch code.
	// (POST /login)
	LoginWithTwitchCode(w http.ResponseWriter, r *http.Request)
	// Get current logged in subscriber.
	// (GET /me)
	GetSelf(w http.ResponseWriter, r *http.Request)
	// Get site configuration.
	// (GET /siteconfig)
	GetSiteConfiguration(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetClips operation middleware
func (siw *ServerInterfaceWrapper) GetClips(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClips(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// LoginWithTwitchCode operation middleware
func (siw *ServerInterfaceWrapper) LoginWithTwitchCode(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginWithTwitchCode(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSelf operation middleware
func (siw *ServerInterfaceWrapper) GetSelf(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSelf(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSiteConfiguration operation middleware
func (siw *ServerInterfaceWrapper) GetSiteConfiguration(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSiteConfiguration(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/clips", wrapper.GetClips)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.LoginWithTwitchCode)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/me", wrapper.GetSelf)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/siteconfig", wrapper.GetSiteConfiguration)
	})

	return r
}

